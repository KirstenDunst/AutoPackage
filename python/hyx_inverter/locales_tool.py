import os
import json
import copy

class Tool:
    # 转换成一级map
    @staticmethod
    def tranformDict(dict:dict,subKey = ''):
        newDict = {}
        for k,v in dict.items():
            nowKey = k 
            if( subKey != '') :
                nowKey = subKey + (k[0].upper() + k[1:len(k)])
            if str(v.__class__).__contains__('dict'):
                dealDict = Tool.tranformDict(v,subKey = nowKey)
                newDict.update(dealDict)
            else:
                newDict[nowKey] = v
        return newDict
    
    @staticmethod
    def replace_text(file_path, origin_str, replace_str):
        f1 = open(file_path, "r")
        content = f1.read()
        f1.close()
        t = content.replace(origin_str, replace_str)
        with open(file_path, "w") as f2:
            f2.write(t)

    @staticmethod
    def localContent():
        file_content = "import 'package:flutter/material.dart';\nimport 'package:hyx_inverter/generated/locales.g.dart';\nimport 'package:hyx_inverter/tool/global_util.dart';\n\nclass LocaleLanguage extends InheritedWidget {\n  const LocaleLanguage({\n    Key? key,\n    required this.local,\n    required Widget child,\n  }) : super(key: key, child: child);\n\n  final Locale local;\n\n  static LocaleLanguage? of() =>\n      AppShare.instance.rootContext?.dependOnInheritedWidgetOfExactType<LocaleLanguage>();\n\n  @override\n  bool updateShouldNotify(LocaleLanguage oldWidget) {\n    return oldWidget.local != local;\n  }\n}\n\nextension Trans on String {\n  bool get _fullLocaleAndKey {\n    return AppTranslation.translations.containsKey(\n            '${LocaleLanguage.of()?.local.languageCode}_${LocaleLanguage.of()?.local.countryCode}') &&\n        AppTranslation.translations[\n                '${LocaleLanguage.of()?.local.languageCode}_${LocaleLanguage.of()?.local.countryCode}']!\n            .containsKey(this);\n  }\n\n  Map<String, String>? get _getSimilarLanguageTranslation {\n    final translationsWithNoCountry = AppTranslation.translations\n        .map((key, value) => MapEntry(key.split('_').first, value));\n    final containsKey = translationsWithNoCountry\n        .containsKey(LocaleLanguage.of()?.local.languageCode.split('_').first);\n\n    if (!containsKey) {\n      return null;\n    }\n\n    return translationsWithNoCountry[\n        LocaleLanguage.of()?.local.languageCode.split('_').first];\n  }\n\n  String get tr {\n    if (LocaleLanguage.of()?.local.languageCode == null) return this;\n\n    if (_fullLocaleAndKey) {\n      var temp = AppTranslation.translations[\n              '${LocaleLanguage.of()?.local.languageCode}_${LocaleLanguage.of()?.local.countryCode}']![\n          this]!;\n      return temp;\n    }\n    final similarTranslation = _getSimilarLanguageTranslation;\n    if (similarTranslation != null && similarTranslation.containsKey(this)) {\n      return similarTranslation[this]!;\n    } else {\n      return this;\n    }\n  }\n}"
        return file_content

def trans_to_const():
    root_path = os.path.abspath(os.path.dirname(__file__)+os.path.sep+"..")
    source_dir = root_path + '/assets/locales/'
    generated_file_path = root_path +'/lib/generated/locales.g.dart'
    local_file_path = root_path +'/lib/generated/locales.dart'

    translationClass = 'AppTranslation'
    translationFirst = 'static Map<String, Map<String, String>> translations = {'
    supportLocalFirst = 'static List<Locale> supportedLocales = ['
    localeKeyFirst = 'LocaleKeys._();'
    localeFirst = 'class Locales {'


    if os.path.exists(source_dir) and os.path.isdir(source_dir):
        # 清理旧生成文件
        if os.path.exists(generated_file_path):
            os.remove(generated_file_path)
        generated_file_parent_path = os.path.dirname(generated_file_path)
        os.makedirs(generated_file_parent_path,exist_ok=True)
        file = open(generated_file_path,'w')
        file.write("// DO NOT EDIT. This is code generated by : python3 /scripts/locales.py  \nimport 'package:flutter/material.dart';\n\nexport 'package:get/get_utils/src/extensions/internacionalization.dart';\n\nclass "+translationClass + " {\n  "+translationFirst+"  };\n\n  "+supportLocalFirst+"  ];\n}\n\nclass LocaleKeys {\n  "+localeKeyFirst+"}\n\n"+localeFirst+"}\n") #写入内容信息
        file.close()

        # 写入数据共享文件
        # if not os.path.exists(local_file_path):
        #     localFile = open(local_file_path,'w')
        #     localFile.write(Tool.localContent())
        #     localFile.close()

        file_list = os.listdir(source_dir)
        # 一维map
        json_temp_dict = {}
        keys_arr = []
        for file_name in file_list:
            if file_name.endswith('.json'):
                if (file_name.__contains__('_')):
                    file_path = os.path.join(source_dir, file_name)
                    with open(file_path, 'r') as f:
                        content = f.read()
                    # 文件中的json
                    json_content = json.loads(content)
                    json_content = Tool.tranformDict(json_content)
                    if "" in json_content.values() :
                        exit(file_name + '存在未翻译的字段,中断locales.g.dart的生成')
                    keys_arr.append(list(json_content.keys()))
                    json_file_name = file_name.replace('.json','')
                    json_temp_dict[json_file_name] =json_content
                else:
                    continue
            else :
                continue
        # 文件比对，key值是否健全，一致，需要提醒
        if len(keys_arr) > 1:
            first_keys = list(keys_arr[0])
            lst3 = copy.deepcopy(first_keys)
            for key in lst3 :
                for other_keys in keys_arr:
                    if other_keys.__contains__(key):
                        other_keys.remove(key)
            isSame = True
            for key in keys_arr:
                if len(key) > 0:
                    isSame = False
                    break
        
            if isSame:
                # 所有校验完成，开始处理文件

                # 1.更新LocaleKeys文件
                localeKeyStr = localeKeyFirst+'\n'
                json_keys:dict = list(json_temp_dict.values())[0]
                for key in json_keys.keys():
                    lowercase_key = (str(key[0]).lower() + key[1:len(key)])
                    localeKeyStr = localeKeyStr +"  static const "+ lowercase_key +" = '"+key+"';\n"
                Tool.replace_text(generated_file_path,localeKeyFirst,localeKeyStr)

                # 2.更新Locales
                localeStr = localeFirst + '\n'
                translationsStr = translationFirst + '\n'
                supportStr = supportLocalFirst + '\n'
                for key, value in json_temp_dict.items():
                    key_splits = str(key).split('_')
                    translationsStr = translationsStr+"    '"+key+"': Locales."+key_splits[0]+key_splits[-1]+",\n"  
                    supportStr = supportStr + "    const Locale('"+key_splits[0]+"', '"+key_splits[-1]+"'),\n"
                    localeStr = localeStr+'  static const '+str(key).replace('_','') +' = {\n'
                    if str(value.__class__).__contains__('dict'):
                        for key1, value1 in value.items():
                            value_origin = str(value1).replace('\n','\\n')
                            localeStr = localeStr + "    '"+key1+"': \""+value_origin+"\",\n"
                    localeStr = localeStr + '  };\n'
                Tool.replace_text(generated_file_path,localeFirst,localeStr)

                # 3.更新translations map     
                Tool.replace_text(generated_file_path,translationFirst,translationsStr)
                # 4.更新supportLocals
                Tool.replace_text(generated_file_path,supportLocalFirst,supportStr)
                
            else:
                exit('数据对比key有差异:'+str(keys_arr))

        else :
            exit('参照元素不够:'+str(keys_arr))  
    else :
        exit('没有在assets资源文件夹下找到locales文件夹')

if __name__ == '__main__':
    trans_to_const()